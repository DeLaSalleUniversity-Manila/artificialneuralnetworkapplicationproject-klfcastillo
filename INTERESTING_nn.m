function [Y,Xf,Af] = INTERESTING_nn(X,~,~)
% INTERESTING_nn neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 03-Dec-2015 21:29:36.
%
% CPELEC1 Project 
% Karlos Castillo, Aldwin del Rosario, Adrian Jarabelo
% INTegral Emergency RESponse Tool for Identifying Natural disaster Gravity
% (Typhoon Damage Cost Estimation through Artificial Neural Network) 
%
%   X = 1xTS cell, 1 inputs over TS timsteps
%   Each X{1,ts} = 4xQ matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1_xoffset = [35;52;17;51];
x1_step1_gain = [0.0266666666666667;0.00574712643678161;0.2;0.133333333333333];
x1_step1_ymin = -1;

% Layer 1
b1 = [2.9532883512583625;2.6419993694383046;-2.2187938403392402;-2.0424042157661093;-1.700207848019845;1.1709114301252741;1.2810559213900794;0.66157171575050655;0.53339982975947564;-0.4779257933332543;0.077071996547465244;0.26962029558460415;-0.85218740740327803;1.1840746034642839;1.4050431288570004;1.7734188258314538;-1.8541472419152634;-2.0495033404396534;-2.7037319188867013;-2.7971389230424677];
IW1_1 = [-0.88945433111196859 0.28443636097420671 -2.3241065392309563 1.5912141390861185;-2.4288139492203347 -0.31065264684490856 -1.0629395104600627 1.2756783228898694;1.1149253100394707 1.0751367362242055 2.4544341694459071 -0.91654767171707308;2.2917891764475562 0.045262425222588561 1.6452651843138053 -0.98455690680873398;1.134306518132064 2.3546220029185645 0.86687043179997614 -1.0605531810914146;-1.5742713240467625 -1.4428936225872222 1.9338108918114254 1.1947348129729514;-0.94356886267216811 -0.61473121257384722 2.6394856886454345 -0.3037139339906394;-1.9100477570461623 0.75308685253745333 -2.0395366084654545 -0.42807051793946832;-1.8533285155915196 -2.0671987593912684 1.0291503905077732 -0.37576251069465783;-2.205458713317241 0.60586719207211259 0.006561410797317058 1.9309100768056044;1.7164882947279101 -1.5894125500003744 -1.3343038001085532 -1.0773024381278993;1.3403375166110989 0.43196143452402247 1.9517587572730732 1.6798363397224663;-0.83401224314951239 1.4872936351534023 0.038739487375355854 -2.4333728892094637;2.0444983979721676 -0.11030215342861478 1.8325788195119159 -0.96898698439983921;1.3162944991974286 -0.31708155292459311 -2.2593888080512277 1.3279732410967813;0.72639414018256532 -2.2792741358603101 -1.7426598965138942 -0.61353196143673594;-0.6606391117409447 -2.7577295786262992 0.87165321195167322 0.68956411278226992;-1.0347661764334866 1.3648889891152962 -2.5880351104801194 -0.31700238604333258;-1.6357661322786399 1.214792746600259 0.55069606979425578 -2.00802371871282;-1.8483015881964029 -1.9342741184291334 -1.3745064855060649 0.84073696941376153];

% Layer 2
b2 = 0.27566221120896356;
LW2_1 = [-0.24318358790968109 -0.46193989613478897 -0.056582301944425602 0.68836207576894359 0.72844779026344508 0.35907824785951503 -0.56656351202379174 -0.44244993984150471 0.17153120270533831 0.64397317573333435 0.39301802977179784 -0.5133009456438411 -0.25396640564497314 0.015480877915486701 -0.090332721534104113 0.42578252967334257 -0.21184071333794591 -0.37153618233685887 0.21170182509803129 -0.44421845635146412];

% Output 1
y1_step1_ymin = -1;
y1_step1_gain = 0.000219792031548913;
y1_step1_xoffset = 0.48904;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX, X = {X}; end;

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},2); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1_gain,y1_step1_xoffset,y1_step1_ymin);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings_gain,settings_xoffset,settings_ymin)
y = bsxfun(@minus,x,settings_xoffset);
y = bsxfun(@times,y,settings_gain);
y = bsxfun(@plus,y,settings_ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings_gain,settings_xoffset,settings_ymin)
x = bsxfun(@minus,y,settings_ymin);
x = bsxfun(@rdivide,x,settings_gain);
x = bsxfun(@plus,x,settings_xoffset);
end
